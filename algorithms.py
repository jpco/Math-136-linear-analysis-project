
import numpy as np
import random
from datetime import datetime as dt

np.set_printoptions(8, 5000, 3, 1000, True, "NaN", "inf", None)

'''
=======================================================
                 VARIABLE DEFINITIONS
=======================================================
'''

# The original FULL dataset for all cancers
orig_data_total = np.array([[1,0,0,0,0,3,2,0,0,0,0,1,0,0,0,0,0,1,1,0,0,3,2,4,3,0,1,1,0,0,0,0,1,0,0,0,0,0,3,0,2,1,0,1,0,0,0,0,0,0],
           [3,0,0,0,1,4,1,0,0,0,0,1,0,0,0,2,2,2,1,0,0,7,8,7,5,1,0,1,0,2,2,0,4,0,0,0,0,0,2,1,3,0,0,1,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
           [3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,10,4,2,15,0,0,1,0,0,5,0,2,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0],
           [11,0,0,0,0,20,0,0,0,0,0,2,0,0,0,0,2,9,1,0,0,25,30,45,80,1,2,2,0,1,7,0,4,3,0,0,0,2,1,4,3,0,0,1,0,0,0,0,0,0],
           [4,0,0,0,1,15,1,0,0,0,0,3,0,0,0,0,2,2,1,0,0,6,18,8,8,0,1,3,0,0,1,0,6,1,0,0,0,0,6,0,1,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,3,4,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],
           [149,0,0,0,17,213,42,0,54,0,0,36,0,0,0,19,22,40,11,0,0,218,247,277,230,8,53,49,0,52,59,0,158,1,0,0,0,0,124,12,52,17,0,35,0,0,0,33,7,0],
           [23,0,0,0,10,36,1,0,0,0,0,10,0,0,0,3,7,19,11,0,0,97,94,133,232,8,24,6,0,2,37,0,11,0,0,0,0,0,5,12,13,2,0,2,0,0,0,1,7,0],
           [9,0,0,0,0,2,1,0,0,0,0,2,0,0,0,2,0,7,4,0,0,35,15,19,42,6,3,9,0,0,20,0,1,0,0,0,0,0,1,3,1,1,0,3,0,0,0,4,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [6,0,0,0,0,6,0,0,0,0,0,2,0,0,0,0,3,4,1,0,0,21,19,22,70,0,0,4,0,3,4,0,8,0,0,0,0,1,2,1,2,2,0,2,0,0,0,0,0,0],
           [3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,4,1,0,0,0,6,4,3,0,0,0,2,0,0,1,0,2,0,0,0,0,0,2,1,0,0,1,0,0,0,0,1,0,0],
           [5,0,0,0,1,3,0,0,0,0,0,3,0,0,0,1,0,1,2,0,0,18,9,13,21,3,0,8,0,0,4,0,2,0,0,0,0,0,2,3,2,1,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [18,0,0,0,2,20,4,0,1,0,0,2,0,0,0,1,8,8,5,0,0,21,30,26,23,1,1,9,0,1,6,0,10,1,0,0,0,1,3,4,3,2,0,1,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [2,0,0,0,0,4,0,0,0,0,0,1,0,0,0,1,0,2,0,0,0,5,13,11,31,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,0],
           [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,4,6,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
           [7,0,0,0,0,3,1,0,0,0,0,3,0,0,0,1,2,0,1,0,0,0,16,8,18,2,0,4,0,0,7,0,3,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0],
           [59,0,0,0,1,38,15,0,0,0,0,12,0,0,0,6,17,30,9,0,0,58,48,76,114,4,0,23,0,13,12,0,27,1,0,0,0,2,8,6,18,5,0,15,0,0,0,1,1,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [9,0,0,0,6,6,2,0,0,0,0,13,0,0,0,2,2,8,7,0,0,25,18,26,36,12,6,2,0,2,63,0,16,0,0,0,0,0,4,6,8,4,0,2,0,0,0,11,6,0],
           [12,0,0,0,2,7,0,0,1,0,0,13,0,0,0,4,1,8,4,0,0,63,29,35,68,7,4,0,0,2,25,0,11,1,0,0,0,0,3,6,7,4,1,3,0,0,0,2,0,0],
           [2,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,5,4,11,0,0,0,0,0,1,0,1,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [1,0,0,0,0,7,2,0,0,0,0,1,0,0,0,1,1,1,0,0,0,23,15,20,60,1,0,0,0,0,0,0,2,0,0,0,0,0,1,1,2,0,0,6,0,0,0,0,0,0],
           [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [16,0,0,0,5,91,0,0,0,0,0,1,0,0,0,4,1,8,1,0,0,36,59,85,121,0,0,6,0,0,2,0,8,0,0,0,0,0,2,1,8,1,4,2,0,0,0,0,0,0],
           [33,0,0,0,10,27,2,0,0,0,0,5,0,0,0,5,4,13,4,0,0,120,86,90,167,3,10,4,0,2,25,0,11,8,0,0,0,2,8,3,8,0,0,8,0,0,0,8,3,0],
           [1,0,0,0,2,1,0,0,0,0,0,1,0,0,0,0,0,2,2,0,0,3,3,3,4,2,0,2,0,0,2,0,0,2,0,0,0,1,0,1,1,2,1,1,0,0,0,0,0,0],
           [1,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,0,4,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [25,0,0,0,2,25,15,0,3,0,0,8,0,0,0,7,14,18,3,0,0,28,47,45,52,2,4,14,0,8,11,0,12,3,0,0,0,3,22,11,12,5,2,14,0,0,0,4,1,0],
           [0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,2,0,0,8,3,1,6,1,1,0,0,0,5,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [39,0,0,0,7,33,1,0,2,0,0,18,0,0,0,20,8,10,12,0,0,125,65,104,225,28,28,40,0,3,79,0,15,4,0,0,0,1,9,24,13,1,0,3,0,0,0,11,0,0],
           [6,0,0,0,0,8,1,0,0,0,0,3,0,0,0,1,2,11,2,0,0,19,18,21,19,3,0,3,0,4,6,0,3,1,0,0,0,2,2,3,3,2,1,2,0,0,0,0,0,0],
           [4,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,3,1,0,0,0,10,22,13,19,0,0,3,0,4,0,0,5,0,0,0,0,0,4,1,0,0,0,0,0,0,0,0,0,0],
           [5,0,0,0,0,7,0,0,0,0,0,2,0,0,0,0,8,6,0,0,0,8,19,33,107,0,0,2,0,0,4,0,8,0,0,0,0,0,2,2,4,0,0,1,0,0,0,0,0,0],
           [2,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,6,6,9,24,1,0,1,0,0,1,0,3,0,0,0,0,0,1,0,27,0,0,0,0,0,0,0,0,0],
           [6,0,0,0,1,10,4,0,0,0,0,1,0,0,0,0,1,5,4,0,0,2,16,18,9,2,4,8,0,2,3,0,6,1,0,0,0,1,4,1,2,1,1,4,0,0,0,1,0,0],
           [14,0,0,0,5,8,0,0,1,0,0,2,0,0,0,2,1,8,2,0,0,34,30,42,64,6,15,4,0,0,20,0,7,0,0,0,0,0,4,5,1,2,0,5,0,0,0,0,7,0],
           [2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,2,6,6,18,0,0,0,0,1,0,0,2,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0]])

# the number of tumors of each type of metastasis
type_metas_rate = sum(orig_data_total)
# the total number of metastases
num_metas_total = sum(type_metas_rate)
# the general metastasis distribution (normed)
total_distribution = [l / num_metas_total for l in type_metas_rate]

# the row of the particular primary tumor we care about
primary = 22
# the metastases for the primary cancer we want
orig_data = orig_data_total[primary]

# the normed data for the cancer we want
num_metas = sum(orig_data)
norm_data = [l / num_metas for l in orig_data]

# just the identity matrix
ident = np.eye(len(norm_data))

# calculation constants:
epsilon = 10**(-5) # error size
delta_scale = 100.0 # delta 'scaling'
ensemble_size = 1000 # number of matrices to average

'''
=======================================================
                  FUNCTION DEFINITIONS
=======================================================
'''
# Builds A_0 and begins iteration

def create_matrix():
    mat = np.zeros([len(norm_data),len(norm_data)]) # creates an empty matrix
    for i in range(len(norm_data)): # fills the rows ...
        if i == primary:
            mat[i] = norm_data # ... with the primary distribution
        else:
            mat[i] = total_distribution # ... with the general distribution
        
    mat = iterate(mat) # start iteration
    return mat

# Iterates to get A_f from A_0
def iterate(mat):
    resid = np.dot(norm_data, mat - ident) # calculate residual
    normsq_resid = np.dot(resid, resid)
    
    while normsq_resid > epsilon:
        max_col = np.argmax(resid) # pick max column
        min_col = np.argmin(resid) # pick min column
        row = random.randrange(0, len(norm_data)) # pick row
        delta = normsq_resid * delta_scale # pick delta
        
        if (mat[row][max_col] - delta) < 0: # to prevent values < 0 in matrix
            delta = mat[row][max_col]       

        mat[row][max_col] = mat[row][max_col] - delta
        mat[row][min_col] = mat[row][min_col] + delta

        resid = np.dot(norm_data, mat - ident) # calculate new residual
        normsq_resid = np.dot(resid, resid)

    return mat


'''
=======================================================
                      RUNTIME STUFF
=======================================================
'''

fo = open("results.txt","w+")

# Prints some parameters of calculation
print("Epsilon: " + repr(epsilon))
print("Ensemble size: " + repr(ensemble_size))
print("Delta scale: " + repr(delta_scale))

fo.write("Target distribution: " + repr(norm_data) + "\n")
fo.write("General distribution: " + repr(total_distribution) + "\n")
fo.write("Epsilon: " + repr(epsilon) + "\n")
fo.write("Ensemble size: " + repr(ensemble_size) + "\n")
fo.write("Delta scale: " + repr(delta_scale) + "\n\n")

time1 = dt.now()

print("Calculating matrices ...")

# Creates the first matrix
mat = create_matrix()
mat_list = [mat]

# Creates the rest of the matrices
for i in range(2, ensemble_size + 1):
    nmat = create_matrix()
    mat = mat + nmat
    mat_list.append(nmat)
    if i % 5 == 0:
       print(i, end=" ")

print()

# Calculates the average matrix
print("Averaging ...")
mat = mat / ensemble_size

time2 = dt.now()
dtime = time2 - time1

# Prints the results of the A_j ensemble, and runtime info
difstr = repr(np.dot(norm_data, mat) - norm_data)
difstr = difstr[6:len(difstr)-1]
fo.write(repr(mat) + "\n\n")

fo.write("Difference: " + difstr + "\n")
fo.write("Time: " + repr(dtime.seconds) + "." + repr(dtime.microseconds) + " s\n\n")

fo.write(" ----------------- \n\n")

print("Performing SVD ...")

sval_list = []

for i in range(len(mat)):
    sval_list.append([])

# Calculates the singular values for each matrix
for mat in mat_list:
    sval = np.linalg.svd(mat, False, False)
    for i in range(len(sval)):
        sval_list[i].append(sval[i])

# Prints data about the singular values
for i in range(len(sval_list)):
    fo.write("For value " + repr(i) + "\n")
    fo.write("    Mean = " + repr(sum(sval_list[i]) / len(sval_list[i])) + "\n")
    fo.write("    Median = " + repr(np.median(sval_list[i])) + "\n")
    fo.write("    Min-max = " + repr(min(sval_list[i])) + " -> " + repr(max(sval_list[i])) + "\n")
    fo.write("    STDev = " + repr(np.std(sval_list[i])) + "\n\n")

fo.close()

print("Done")
